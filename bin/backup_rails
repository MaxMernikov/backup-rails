#!/usr/bin/env ruby
require 'thor'
require 'dotenv'
require 'yaml'

class BackupRailsCLI < Thor
  include Thor::Actions

  def self.source_root
    File.dirname(__FILE__)
  end

  desc "restore ARCHIVE DESTINATION", "Restore files from backup file"
  method_option :ssl_password,
                :aliases => ['-sp'],
                :required => false,
                :type => :string,
                :desc => "password for SSL encrypt"
  def restore archive_path, destination_path
    Dotenv.load
    puts "Restoring from #{archive_path}"
    dir = Dir.mktmpdir
    begin
      if options[:ssl_password]
        create_file dir + "/simple.txt", options[:ssl_password]
        system "cd #{dir} && openssl aes-256-cbc -d -base64 -pass file:simple.txt -in #{archive_path} -out restore.tar && rm simple.txt"
        system "cd #{dir} && tar -xf restore.tar"
      else
        system "cd #{dir} && tar -xf #{archive_path}"
      end
      system "mkdir -p #{destination_path} && cd #{destination_path} && tar -xf #{dir}/general/archives/code.tar.gz"

      # restore database
      environment = 'production'
      if File.exists? destination_path + "/config/database.yml"
        dbconfig = YAML::load(ERB.new(IO.read(File.join(destination_path, 'config', 'database.yml'))).result)[environment]
        if dbconfig['adapter'] == 'mysql2'
          run "echo \"create database #{dbconfig['database']}\" | mysql -u #{dbconfig['username']} --password=#{dbconfig['password']}"
          run "cd #{dir}/general/databases && gzip -d MySQL.sql.gz"
          run "cd #{dir}/general/databases && mysql -u #{dbconfig['username']} --password=#{dbconfig['password']} #{dbconfig['database']} < MySQL.sql"
        end
      end
      # mongoid
      if File.exists? destination_path + "/config/mongoid.yml"
        dbconfig = YAML::load(ERB.new(IO.read(File.join(destination_path, 'config', 'mongoid.yml'))).result)[environment]
        dbconfig = dbconfig['sessions']['default']
        run "cd #{dir}/general/databases && tar -xf MongoDB.tar.gz"
        options = { username: dbconfig['username'], password: dbconfig['password'], db: dbconfig['database'] }
        params = options.select {|k,v| !v.nil? && !v.empty? }.map {|k,v| "--#{k} #{v}"}.join(" ")
        run "cd #{dir}/general/databases && mongorestore #{params} #{dir}/general/databases/MongoDB/#{dbconfig['database']}"
      end
    ensure
      # remove the directory.
      #FileUtils.remove_entry_secure dir
    end
  end
end

BackupRailsCLI.start
